<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>terraform - Tag - hkyeong&#39;s blog</title>
        <link>https://hkyeong0703.github.io/tags/terraform/</link>
        <description>terraform - Tag - hkyeong&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 08 Sep 2021 20:31:02 &#43;0900</lastBuildDate><atom:link href="https://hkyeong0703.github.io/tags/terraform/" rel="self" type="application/rss+xml" /><item>
    <title>Packer vs AWS EC2 Image Builder</title>
    <link>https://hkyeong0703.github.io/posts/packer_vs_aws_ec2_image_builder/</link>
    <pubDate>Wed, 08 Sep 2021 20:31:02 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://hkyeong0703.github.io/posts/packer_vs_aws_ec2_image_builder/</guid>
    <description><![CDATA[Golden image란?골든 이미지는 OS 영역을 포함해 필수 패키지가 설치된 일종의 표준 이미지 개념입니다.
 장점  공통 부분을 미리(패키징) 해둠으로써 인스턴스 프로비저닝 시간을 최소화함 새 이미지로부터 새로운 객체들을 생성하기 때문에 보안 관점에서도 좋음.   단점  주기적인 이미지를 다시 만들어야하는 번거로움 예시로, 설치된 패키지 중 특정 버전에 취약점이 발견 시 해당 패키지가 업데이트된 이미지를 다시 만들어 줘야한다. 더 큰 문제는 이미지를 생성한 이후의 작업(테스트,공유)들도 덩달아 공수를 유발한다는 것 또한 부담이다.]]></description>
</item><item>
    <title>Terraform용 cdk를 이용하여 Go로 AWS 인프라 구축 시작하기</title>
    <link>https://hkyeong0703.github.io/posts/terraform_cdk_go/</link>
    <pubDate>Wed, 14 Jul 2021 22:01:24 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://hkyeong0703.github.io/posts/terraform_cdk_go/</guid>
    <description><![CDATA[오늘은 Terraform용 CDK를 통해 Go언어를 사용하는 방법에대해 알아보려합니다.
우선 Terraform과 CDK가 무엇인지부터 간단하게 알아보겠습니다.
Terraform이란?HashiCorp사가 만든 오픈 소스 &ldquo;코드형 인프라(IaC)&rdquo; 툴 입니다. 인프라를 안전하고 효율적으로 구축, 변경 및 버전화 할 수 있습니다.
선언적인 코딩 툴, HCL(HashiCorp Configuration Language)라고 불리는 상위 레벨 구성 언어를 사용하거나 또는 JSON으로 어플리케이션 실행을 위해 원하는 &ldquo;엔드 상태&rdquo; 클라우드 또는 온프레미스 인프라를 기술하도록 합니다. 그런 다음 해당 엔드 상태에 도달하기 위한 계획을 생성하고 인프라를 프로비저닝하기 위한 계획을 실행합니다.]]></description>
</item></channel>
</rss>
