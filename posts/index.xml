<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - hkyeong&#39;s blog</title>
        <link>https://hkyeong0703.github.io/posts/</link>
        <description>All Posts | hkyeong&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 08 Sep 2021 20:31:02 &#43;0900</lastBuildDate><atom:link href="https://hkyeong0703.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Packer_vs_aws_ec2_image_builder</title>
    <link>https://hkyeong0703.github.io/posts/packer_vs_aws_ec2_image_builder/</link>
    <pubDate>Wed, 08 Sep 2021 20:31:02 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://hkyeong0703.github.io/posts/packer_vs_aws_ec2_image_builder/</guid>
    <description><![CDATA[Golden image란?골든 이미지는 OS 영역을 포함해 필수 패키지가 설치된 일종의 표준 이미지 개념입니다.
 장점  공통 부분을 미리(패키징) 해둠으로써 인스턴스 프로비저닝 시간을 최소화함 새 이미지로부터 새로운 객체들을 생성하기 때문에 보안 관점에서도 좋음.   단점  주기적인 이미지를 다시 만들어야하는 번거로움 예시로, 설치된 패키지 중 특정 버전에 취약점이 발견 시 해당 패키지가 업데이트된 이미지를 다시 만들어 줘야한다. 더 큰 문제는 이미지를 생성한 이후의 작업(테스트,공유)들도 덩달아 공수를 유발한다는 것 또한 부담이다.]]></description>
</item><item>
    <title>Terraform용 cdk를 이용하여 Go로 AWS 인프라 구축 시작하기</title>
    <link>https://hkyeong0703.github.io/posts/terraform_cdk_go/</link>
    <pubDate>Wed, 14 Jul 2021 22:01:24 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://hkyeong0703.github.io/posts/terraform_cdk_go/</guid>
    <description><![CDATA[오늘은 Terraform용 CDK를 통해 Go언어를 사용하는 방법에대해 알아보려합니다.
우선 Terraform과 CDK가 무엇인지부터 간단하게 알아보겠습니다.
Terraform이란?HashiCorp사가 만든 오픈 소스 &ldquo;코드형 인프라(IaC)&rdquo; 툴 입니다. 인프라를 안전하고 효율적으로 구축, 변경 및 버전화 할 수 있습니다.
선언적인 코딩 툴, HCL(HashiCorp Configuration Language)라고 불리는 상위 레벨 구성 언어를 사용하거나 또는 JSON으로 어플리케이션 실행을 위해 원하는 &ldquo;엔드 상태&rdquo; 클라우드 또는 온프레미스 인프라를 기술하도록 합니다. 그런 다음 해당 엔드 상태에 도달하기 위한 계획을 생성하고 인프라를 프로비저닝하기 위한 계획을 실행합니다.]]></description>
</item><item>
    <title>AWS Amplify Console 슬랙으로 배포 알림 받기</title>
    <link>https://hkyeong0703.github.io/posts/amplify_slack_notification/</link>
    <pubDate>Wed, 23 Jun 2021 20:31:09 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://hkyeong0703.github.io/posts/amplify_slack_notification/</guid>
    <description><![CDATA[AWS Amplify Console에서 배포시 슬랙으로 알림을 받아보는 방법을 작성해보려고한다.
현재 AWS Amplify Console User Guide 을 보면 이메일 알림을 기본적으로 제공하고, 이를통해 만들어진 SNS 주제를 통해 Slack과 같은 다른 도구에 알림을 보내는 데 활용할 수 있다.
email notification 생성  Amplify 콘솔을 연다.
  Email 알림을 설정할 앱을 선택합니다.
  App settings &gt; Notifications &gt; Manage notifications 을 클릭한다.   알림을 받을 Email을 입력하고, 배포 알림을 받을 대상 브랜치를 선택 후 Save한다.]]></description>
</item><item>
    <title>리눅스 성능을 분석할 수 있는 명령어</title>
    <link>https://hkyeong0703.github.io/posts/linux_performance_analysis_commands/</link>
    <pubDate>Wed, 12 May 2021 19:52:09 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://hkyeong0703.github.io/posts/linux_performance_analysis_commands/</guid>
    <description><![CDATA[Netflix Tech Blog 60초 내에 Linux 성능 분석 에서 리눅스 명령어를 통해 성능을 분석할 수 있는 방법이 나온다.
번역과 함께 읽으며 내가 찾아본 내용들을 같이 추후 참고용으로 기록해두려고한다.
아래 명령어들을 사용해 60초 안에 리눅스 환경에서 CLI를 이용해 어떤 것들을 확인할지 순서대로 알아보자. 일부 명령어는 sysstat 패키지를 설치해야한다.
1 2 3 4 5 6 7 8 9 10  $ uptime $ dmesg | tail $ vmstat 1 $ mpstat -P ALL 1 $ pidstat 1 $ iostat -xz 1 $ free -m $ sar -n DEV 1 $ sar -n TCP,ETCP 1 $ top   자세히 알아보기uptime1 2  $ uptime 23:51:26 up 21:31, 1 user, load average - 30.]]></description>
</item><item>
    <title>Domain에 CNAME, MX Record를 같이 등록하면서 겪은 이슈</title>
    <link>https://hkyeong0703.github.io/posts/dns_cname_mx_record/</link>
    <pubDate>Wed, 14 Apr 2021 18:15:10 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://hkyeong0703.github.io/posts/dns_cname_mx_record/</guid>
    <description><![CDATA[기존에 사용하고 있던 도메인에 Record를 추가하면서 겪었던 이슈에 대해 기록해보려고한다.
최소한 아래 5가지에 대한 개념은 알고 있어야하기에 간단히 짚고 넘어가보자.
  Domain
인터넷에 연결되어있는 장치(컴퓨터, 서버, 스마트폰 등)를 식별할 수 있는 주소인 IP를 사람이 이해하고 기억하기 어렵기때문에 IP에 이름을 부여하여 쉽게 사용할 수 있도록하였는데 이때 부여한 이름이 도메인이다. e.g) google.co.kr, naver.com
  DNS
Domain Name System으로 전화번호부라고 생각하면된다. 도메인과 IP의 쌍(pair)을 가지고있어 서로 변환하는 역할을 한다.
도메인-IP에 대한 쌍을 하나의 Record(Record)라 한다.]]></description>
</item><item>
    <title>Rest_api</title>
    <link>https://hkyeong0703.github.io/posts/rest-api/</link>
    <pubDate>Mon, 07 Sep 2020 00:12:11 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://hkyeong0703.github.io/posts/rest-api/</guid>
    <description><![CDATA[참고 동영상: https://youtu.be/RP_f5dMoHFc
REST를 구성하는 스타일 client-server stateless cache uniform interface  제약 조건  identification of resource → resource가 uri로 표현되면 된다. mainpulation of resource through representations → resource를 변경할 때 http message에 표현을 담아서 처리하면 된다. self-descriptive messages  확장 가능한 커뮤니케이션이 가능하도록 함   hypermedia as the engine of application state (HATEOAS: application 상태는 Hyperlink를 이용해 전이되어야한다.)  application 상태 전이의 late binding, 어디서 어디로 전이가 가능한지 미리 결정되지 않는다.]]></description>
</item><item>
    <title>Mysql View Definer</title>
    <link>https://hkyeong0703.github.io/posts/mysql-view-definer/</link>
    <pubDate>Thu, 13 Aug 2020 00:17:43 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://hkyeong0703.github.io/posts/mysql-view-definer/</guid>
    <description><![CDATA[1 2 3 4 5 6 7 8 9 10  https://dev.mysql.com/doc/refman/8.0/en/create-view.html CREATE [OR REPLACE] [ALGORITHM = {UNDEFINED | MERGE | TEMPTABLE}] [DEFINER = user] [SQL SECURITY { DEFINER | INVOKER }] VIEW view_name [(column_list)] AS select_statement [WITH [CASCADED | LOCAL] CHECK OPTION]   django unit test를 진행하는 과정에서 로컬에 세팅한 DB에 있는 view table에서 권한이 없어 select를 못하는 에러가 계속 발생.
1  _mysql_exceptions.OperationalError: (1449, &#34;The user specified as a definer (&#39;db_user&#39;@&#39;%&#39;) does not exist&#34;)   이유를 모른채 삽질을 하던 중, 생성 쿼리를 뽑아 봄.]]></description>
</item></channel>
</rss>
